// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using aTES.Accounting.Db;

#nullable disable

namespace aTES.Accounting.Db.Migrations
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20230820104144_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("aTES.Accounting.Db.StreamedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChargePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("charge_price");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("PaymentPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("payment_price");

                    b.Property<Guid>("PopugPublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("popug_public_id");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_tasks_public_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Db.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_public_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PopugPublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("popug_public_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Domain.AuditLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("BalanceDelta")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_delta");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("Issued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued");

                    b.HasKey("Id")
                        .HasName("pk_audit_log_items");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_audit_log_items_account_id");

                    b.ToTable("audit_log_items", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Domain.BillingCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_billing_cycles");

                    b.ToTable("billing_cycles", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Domain.PopugTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("BillingCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("billing_cycle_id");

                    b.Property<decimal>("CreditValue")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_value");

                    b.Property<decimal>("DebitValue")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("Issued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued");

                    b.Property<int>("OwnerAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_account_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_popug_transaction");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_popug_transaction_account_id");

                    b.HasIndex("BillingCycleId")
                        .HasDatabaseName("ix_popug_transaction_billing_cycle_id");

                    b.HasIndex("OwnerAccountId")
                        .HasDatabaseName("ix_popug_transaction_owner_account_id");

                    b.ToTable("popug_transaction", (string)null);
                });

            modelBuilder.Entity("aTES.Accounting.Domain.AuditLogItem", b =>
                {
                    b.HasOne("aTES.Accounting.Domain.Account", "OwnerAccount")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audit_log_items_accounts_account_id");

                    b.Navigation("OwnerAccount");
                });

            modelBuilder.Entity("aTES.Accounting.Domain.PopugTransaction", b =>
                {
                    b.HasOne("aTES.Accounting.Domain.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_popug_transaction_accounts_account_id");

                    b.HasOne("aTES.Accounting.Domain.BillingCycle", "BillingCycle")
                        .WithMany("Transactions")
                        .HasForeignKey("BillingCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_popug_transaction_billing_cycles_billing_cycle_id");

                    b.HasOne("aTES.Accounting.Domain.Account", "OwnerAccount")
                        .WithMany()
                        .HasForeignKey("OwnerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_popug_transaction_accounts_owner_account_id");

                    b.Navigation("BillingCycle");

                    b.Navigation("OwnerAccount");
                });

            modelBuilder.Entity("aTES.Accounting.Domain.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("aTES.Accounting.Domain.BillingCycle", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
